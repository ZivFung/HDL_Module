// This file was automatically generated by FIRDesigner software whose author is loywong.
// The file including:
//   ◆  a 21 taps FIR low pass filter module based on Kaiser window (beta=7.000)
//         and it's normalized (to half Freq_sample) cut off frequency is 0.25.
//   ◆  the CSD multipliers which were invoked by the filter module.
// The original coefficients are:
//     0.000188802720689
//     0.000754751053974
//     0.000000000000000
//    -0.005190536447776
//    -0.014706961404006
//    -0.019000483704441
//     0.000000000000000
//     0.055702474181295
//     0.139643776095768
//     0.217888548191066
//     0.250000000000000
//     0.217888548191066
//     0.139643776095768
//     0.055702474181295
//     0.000000000000000
//    -0.019000483704441
//    -0.014706961404006
//    -0.005190536447776
//     0.000000000000000
//     0.000754751053974
//     0.000188802720689

// CSD Multiplier for Coefficient 0.000188802720689
module FIR_Kaiser_21Taps_LP_0d250_CSDMult_p000188802720689
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = 12'b0;
endmodule

// CSD Multiplier for Coefficient 0.000754751053974
module FIR_Kaiser_21Taps_LP_0d250_CSDMult_p000754751053974
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:1], in[11:11]};
endmodule

// CSD Multiplier for Coefficient 0.005190536447776
module FIR_Kaiser_21Taps_LP_0d250_CSDMult_p005190536447776
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:4], in[11:8]} + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.014706961404006
module FIR_Kaiser_21Taps_LP_0d250_CSDMult_p014706961404006
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.019000483704441
module FIR_Kaiser_21Taps_LP_0d250_CSDMult_p019000483704441
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:6], in[11:6]} + {shiftSign[11:4], in[11:8]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.055702474181295
module FIR_Kaiser_21Taps_LP_0d250_CSDMult_p055702474181295
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:8], in[11:4]} - {shiftSign[11:5], in[11:7]} + {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.139643776095768
module FIR_Kaiser_21Taps_LP_0d250_CSDMult_p139643776095768
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = ({shiftSign[11:9], in[11:3]} + {shiftSign[11:6], in[11:6]}) - ({shiftSign[11:3], in[11:9]} - {shiftSign[11:1], in[11:11]});
endmodule

// CSD Multiplier for Coefficient 0.217888548191066
module FIR_Kaiser_21Taps_LP_0d250_CSDMult_p217888548191066
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:10], in[11:2]} - {shiftSign[11:7], in[11:5]} - {shiftSign[11:2], in[11:10]};
endmodule

// CSD Multiplier for Coefficient 0.250000000000000
module FIR_Kaiser_21Taps_LP_0d250_CSDMult_p250000000000000
(
    input [11:0] in,
    output [11:0] out
);
    wire [11:0] shiftSign = (in[11] == 1'b0)? 12'b0 : - 12'b1;
    assign out = + {shiftSign[11:10], in[11:2]};
endmodule


module FIR_Kaiser_21Taps_LP_0d250
(
    input Clock,
    input ClkEn,
    input AsyncRst,
    input signed [11:0] In,
    output reg signed [11:0] Out
);

    reg signed [11:0] delay[19:0];
    wire signed [11:0] prod_0p000188802720689;
    wire signed [11:0] prod_0p000754751053974;
    wire signed [11:0] prod_0p005190536447776;
    wire signed [11:0] prod_0p014706961404006;
    wire signed [11:0] prod_0p019000483704441;
    wire signed [11:0] prod_0p055702474181295;
    wire signed [11:0] prod_0p139643776095768;
    wire signed [11:0] prod_0p217888548191066;
    wire signed [11:0] prod_0p250000000000000;

    FIR_Kaiser_21Taps_LP_0d250_CSDMult_p000188802720689 mult0p000188802720689(In, prod_0p000188802720689);
    FIR_Kaiser_21Taps_LP_0d250_CSDMult_p000754751053974 mult0p000754751053974(In, prod_0p000754751053974);
    FIR_Kaiser_21Taps_LP_0d250_CSDMult_p005190536447776 mult0p005190536447776(In, prod_0p005190536447776);
    FIR_Kaiser_21Taps_LP_0d250_CSDMult_p014706961404006 mult0p014706961404006(In, prod_0p014706961404006);
    FIR_Kaiser_21Taps_LP_0d250_CSDMult_p019000483704441 mult0p019000483704441(In, prod_0p019000483704441);
    FIR_Kaiser_21Taps_LP_0d250_CSDMult_p055702474181295 mult0p055702474181295(In, prod_0p055702474181295);
    FIR_Kaiser_21Taps_LP_0d250_CSDMult_p139643776095768 mult0p139643776095768(In, prod_0p139643776095768);
    FIR_Kaiser_21Taps_LP_0d250_CSDMult_p217888548191066 mult0p217888548191066(In, prod_0p217888548191066);
    FIR_Kaiser_21Taps_LP_0d250_CSDMult_p250000000000000 mult0p250000000000000(In, prod_0p250000000000000);

    always@(posedge Clock or posedge AsyncRst)
    begin
        if(AsyncRst)
        begin
            delay[0] <= 1'b0;
            delay[1] <= 1'b0;
            delay[2] <= 1'b0;
            delay[3] <= 1'b0;
            delay[4] <= 1'b0;
            delay[5] <= 1'b0;
            delay[6] <= 1'b0;
            delay[7] <= 1'b0;
            delay[8] <= 1'b0;
            delay[9] <= 1'b0;
            delay[10] <= 1'b0;
            delay[11] <= 1'b0;
            delay[12] <= 1'b0;
            delay[13] <= 1'b0;
            delay[14] <= 1'b0;
            delay[15] <= 1'b0;
            delay[16] <= 1'b0;
            delay[17] <= 1'b0;
            delay[18] <= 1'b0;
            delay[19] <= 1'b0;
        end
        else if(ClkEn)
        begin
            Out <= delay[0] + prod_0p000188802720689;
            delay[0] <= delay[1] + prod_0p000754751053974;
            delay[1] <= delay[2];
            delay[2] <= delay[3] - prod_0p005190536447776;
            delay[3] <= delay[4] - prod_0p014706961404006;
            delay[4] <= delay[5] - prod_0p019000483704441;
            delay[5] <= delay[6];
            delay[6] <= delay[7] + prod_0p055702474181295;
            delay[7] <= delay[8] + prod_0p139643776095768;
            delay[8] <= delay[9] + prod_0p217888548191066;
            delay[9] <= delay[10] + prod_0p250000000000000;
            delay[10] <= delay[11] + prod_0p217888548191066;
            delay[11] <= delay[12] + prod_0p139643776095768;
            delay[12] <= delay[13] + prod_0p055702474181295;
            delay[13] <= delay[14];
            delay[14] <= delay[15] - prod_0p019000483704441;
            delay[15] <= delay[16] - prod_0p014706961404006;
            delay[16] <= delay[17] - prod_0p005190536447776;
            delay[17] <= delay[18];
            delay[18] <= delay[19] + prod_0p000754751053974;
            delay[19] <=  + prod_0p000188802720689;
        end
    end

endmodule

